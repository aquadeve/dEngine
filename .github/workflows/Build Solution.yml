# Why wont u work
name: Build Solution

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild (VS2022)
        uses: microsoft/setup-msbuild@v2
        with:
          # Use Visual Studio 2022 MSBuild (available on windows-latest)
          vs-version: '[17.0,18.0)'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Find solution file
        id: find-sln
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path . -Filter *.sln -Recurse -File | Select-Object -First 1
          if (-not $sln) {
            Write-Error "No .sln file found in repository."
            exit 1
          }
          Write-Host "Found solution: $($sln.FullName)"
          # expose path for later steps
          echo "::set-output name=path::$($sln.FullName)"

      - name: Restore NuGet packages
        shell: pwsh
        run: |
          $sln = '${{ steps.find-sln.outputs.path }}'
          Write-Host "Restoring NuGet packages for $sln"
          nuget restore "$sln"

      - name: Build solution (Release|x64 and Release|Any CPU)
        shell: pwsh
        run: |
          $sln = '${{ steps.find-sln.outputs.path }}'
          Write-Host "Building solution: $sln"
          $platforms = @('x64','Any CPU')
          foreach ($p in $platforms) {
            Write-Host "========================"
            Write-Host "Building Configuration=Release Platform='$p'"
            # use Rebuild to ensure a clean build
            msbuild $sln /t:Rebuild /p:Configuration=Release /p:Platform="$p" /m
            if ($LASTEXITCODE -ne 0) { throw "msbuild failed for platform $p" }
          }

      - name: Run tests (if test DLL exists)
        shell: pwsh
        run: |
          $sln = '${{ steps.find-sln.outputs.path }}'
          $repoRoot = (Get-Item $sln).Directory.Parent.FullName
          Write-Host "Repo root inferred as: $repoRoot"

          # Try to find the compiled test assembly (common places: bin\Release or bin\x64\Release)
          $testDll = Get-ChildItem -Path $repoRoot -Filter dEngine.Tests.dll -Recurse -File -ErrorAction SilentlyContinue |
                     Where-Object { $_.FullName -match '\\(bin|Bin)\\' -and $_.FullName -match 'Release' } |
                     Select-Object -First 1

          if (-not $testDll) {
            Write-Host "No test DLL (dEngine.Tests.dll) found under bin/Release. Skipping test run."
            exit 0
          }

          Write-Host "Test DLL found: $($testDll.FullName)"
          & vstest.console.exe $testDll.FullName
          if ($LASTEXITCODE -ne 0) { throw "vstest reported failures" }
